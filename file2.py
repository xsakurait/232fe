モジュールの独立性
一番弱い　暗号的強度（どのくらい１人立ちできてるかわからないから）
一番強い　機能的強度（機能持ってるなら強い）
２番目強い　情報的強度

モジュール結合度
一番強い　内容結合　共通結合（共通部分しか渡さないので２番目）
１番弱い　データ結合　２スタンプ結合

UML　オブジェクト指向に使われるモデリング手法
　クラス図　クラス、プロパティ、メソッドかく
　オブジェクト図　インスタンスの関係各
　ユースケース図　ユーザの要求に対するシステムの様子を表す
　コミュニケーション図　オブジェクト間のメッセージのやり取りを示す
　シーケンス図　時系列に機能間でのデータのやり取り示す
　コンポーネント図　ソフトウェアコンポネントのつながり表現
　
単体テスト　ソフトウェア作ってからやる。プログラムを構成する
小さなプログラム単位（ユニット）が機能を果たしているか検証。入力をプログラムで実行し、出力結果確認
ホワイトボックステスト　プログラムの中を見てそれによってテスト内容作る
ブラックボックステスト　プログラムの中身みないで（ブラック）入力に対し、正しい出力か
ボトムアップテスト　下位のモジュールから上位に対し結合する
ドライバ　上位ないなら下位を呼び出すため仮の上位作る
レグレッションテスト　プログラムの修正でほかに影響しないか
レビュー
　インスペクション　責任あるプロジェクトメンバー以外の第三者が参加し、評価する
　　モデレータ　インスペクションの結果を公式に記録する人　
　ウォークスルー（めんどいこと（（人探しで歩くこと）ウォークすること）はスルー）　インスペクションより非公式で、作成者とその関係者で行う
　ラウンドロビン　参加メンバに役割均等に分ける

アジャイル開発　短い時間で反復するので
開発サイクルごとに成果物リリースする
採集的な計画までは立てず、１サイクルの計画を立てる

XP　アジャイルの代表的な開発手法
リファクタリング　完成済みコードを、改善する保守性高くするために、コメント分の追加、変数名の変更
スクラム　アジャイル開発の代表的な手法
　チームのコミュニケーション重視
